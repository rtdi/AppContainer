{"version":3,"file":"plugins/sliceGrouper.js","mappings":"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","sources":["webpack://@amcharts/amcharts5/./src/.internal/plugins/sliceGrouper/SliceGrouper.ts","webpack://@amcharts/amcharts5/./tmp/webpack/plugins/sliceGrouper.js"],"sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport type { PercentSeries, IPercentSeriesDataItem } from \"../../charts/percent/PercentSeries\";\nimport type { Legend } from \"../../core/render/Legend\";\n\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Entity, IEntitySettings, IEntityPrivate, IEntityEvents } from \"../../core/util/Entity\"\n\nimport * as $array from \"../../core/util/Array\";\n\n\nexport interface ISliceGrouperSettings extends IEntitySettings {\n\n\t/**\n\t * A series that will be used to group slices on.\n\t */\n\tseries?: PercentSeries;\n\n\t/**\n\t * If set, plugin will try to manipulate the items in legend, such as\n\t * adding group slice, hiding items for small slices, etc.\n\t */\n\tlegend?: Legend;\n\n\t/**\n\t * Any slice which has percent value less than this setting will be grouped.\n\t * \n\t * @default 5\n\t */\n\tthreshold?: number;\n\n\t/**\n\t * If set, only X first slices will be left as they are. The rest of the\n\t * slices will be grouped.\n\t */\n\tlimit?: number;\n\n\t/**\n\t * Name (category) of the group slice.\n\t *\n\t * @default \"Other\"\n\t */\n\tgroupName?: string;\n\n\t/**\n\t * What happens when group slice is clicked.\n\t *\n\t * * `\"none\"` (default) - nothing.\n\t * * `\"break\"` - underlying small slices are shown.\n\t * * `\"zoom\"` - series shows only small slies (big ones are hidden).\n\t */\n\tclickBehavior?: \"none\" | \"break\" | \"zoom\";\n\n}\n\nexport interface ISliceGrouperPrivate extends IEntityPrivate {\n\tgroupDataItem?: DataItem<IPercentSeriesDataItem>;\n\tnormalDataItems?: DataItem<IPercentSeriesDataItem>[];\n\tsmallDataItems?: DataItem<IPercentSeriesDataItem>[];\n}\n\nexport interface ISliceGrouperEvents extends IEntityEvents {\n}\n\n\n/**\n * A plugin that can be used to automatically group small slices on percent\n * charts into a single slice.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/grouping-slices/} for more info\n */\nexport class SliceGrouper extends Entity {\n\tpublic static className: string = \"SliceGrouper\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([SliceGrouper.className]);\n\n\tdeclare public _settings: ISliceGrouperSettings;\n\tdeclare public _privateSettings: ISliceGrouperPrivate;\n\tdeclare public _events: ISliceGrouperEvents;\n\n\t/**\n\t * A button that is shown when chart small buttons are visible.\n\t */\n\tpublic zoomOutButton?: Button;\n\n\n\tprotected _afterNew(): void {\n\t\tsuper._afterNew();\n\t\tthis._setRawDefault(\"threshold\", 5);\n\t\tthis._setRawDefault(\"groupName\", \"Other\");\n\t\tthis._setRawDefault(\"clickBehavior\", \"none\");\n\t\tthis.initZoomButton();\n\t\tthis._root.addDisposer(this);\n\t}\n\n\tprivate initZoomButton(): void {\n\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\tif (clickBehavior !== \"none\") {\n\t\t\tconst container = this.root.tooltipContainer;\n\t\t\tthis.zoomOutButton = container.children.push(Button.new(this._root, {\n\t\t\t\tthemeTags: [\"zoom\"],\n\t\t\t\ticon: Graphics.new(this._root, {\n\t\t\t\t\tthemeTags: [\"button\", \"icon\"]\n\t\t\t\t})\n\t\t\t}));\n\t\t\tthis.zoomOutButton.hide();\n\t\t\tthis.zoomOutButton.events.on(\"click\", () => {\n\t\t\t\tthis.zoomOut();\n\t\t\t});\n\t\t}\n\n\t}\n\n\tprivate handleData(): void {\n\t\tconst series = this.get(\"series\");\n\n\t\tif (series) {\n\n\t\t\t// Create group data item if not yet available\n\t\t\tlet groupDataItem = this.getPrivate(\"groupDataItem\");\n\t\t\tif (!groupDataItem) {\n\n\t\t\t\tconst legend = this.get(\"legend\");\n\t\t\t\tconst categoryField = series.get(\"categoryField\", \"category\");\n\t\t\t\tconst valueField = series.get(\"valueField\", \"value\");\n\n\t\t\t\t// Add slice\n\t\t\t\tconst groupSliceData: any = {};\n\t\t\t\tgroupSliceData[categoryField] = this.get(\"groupName\", \"\");\n\t\t\t\tgroupSliceData[valueField] = 0;\n\t\t\t\tseries.data.push(groupSliceData);\n\n\t\t\t\tgroupDataItem = series.dataItems[series.dataItems.length - 1];\n\n\t\t\t\tgroupDataItem.get(\"slice\").events.on(\"click\", () => {\n\t\t\t\t\tthis.handleClick();\n\t\t\t\t});\n\n\t\t\t\tthis.setPrivate(\"groupDataItem\", groupDataItem);\n\n\t\t\t\t// Add to legend\n\t\t\t\tif (legend) {\n\t\t\t\t\tlegend.data.push(groupDataItem);\n\n\t\t\t\t\t//const legendDataItem = groupDataItem.get(\"legendDataItem\");\n\t\t\t\t\tgroupDataItem.on(\"visible\", (visible) => {\n\t\t\t\t\t\tif (visible) {\n\t\t\t\t\t\t\tthis.zoomOut();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Recalculate group value and decorate small slices as necessary\n\t\t\tconst threshold = this.get(\"threshold\", 0);\n\t\t\tconst limit = this.get(\"limit\", 1000);\n\t\t\tconst normalDataItems: any = [];\n\t\t\tconst smallDataItems: any = [];\n\t\t\tlet groupValue = 0;\n\t\t\tif (threshold || limit) {\n\n\t\t\t\t$array.each(series.dataItems, (item, index) => {\n\t\t\t\t\tconst legendDataItem = item.get(\"legendDataItem\");\n\t\t\t\t\tif (((item.get(\"valuePercentTotal\") <= threshold) || (index > (limit - 1))) && groupDataItem !== item) {\n\t\t\t\t\t\tgroupValue += item.get(\"value\", 0);\n\t\t\t\t\t\tsmallDataItems.push(item);\n\t\t\t\t\t\titem.hide(0);\n\t\t\t\t\t\tif (legendDataItem) {\n\t\t\t\t\t\t\tlegendDataItem.get(\"itemContainer\").hide(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnormalDataItems.push(item);\n\t\t\t\t\t\tif (legendDataItem) {\n\t\t\t\t\t\t\tlegendDataItem.get(\"itemContainer\").show(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.setPrivate(\"normalDataItems\", normalDataItems);\n\t\t\t\tthis.setPrivate(\"smallDataItems\", smallDataItems);\n\t\t\t\tthis.updateGroupDataItem(groupValue);\n\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Resets slice setup to original grouping state.\n\t */\n\tpublic zoomOut(): void {\n\t\tconst groupDataItem = this.getPrivate(\"groupDataItem\");\n\t\tif (groupDataItem) {\n\t\t\tgroupDataItem.show();\n\t\t}\n\n\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\tif (clickBehavior == \"zoom\") {\n\t\t\tconst normalDataItems: any = this.getPrivate(\"normalDataItems\", []);\n\t\t\t$array.each(normalDataItems, (item: any, _index) => {\n\t\t\t\titem.show();\n\t\t\t});\n\t\t}\n\n\t\tconst smallDataItems: any = this.getPrivate(\"smallDataItems\", []);\n\t\t$array.each(smallDataItems, (item: any, _index) => {\n\t\t\titem.hide();\n\t\t});\n\n\t\tif (this.zoomOutButton) {\n\t\t\tthis.zoomOutButton.hide();\n\t\t}\n\t}\n\n\tprivate updateGroupDataItem(groupValue: number): void {\n\t\tconst series = this.get(\"series\");\n\t\tif (series) {\n\t\t\tconst groupSliceData: any = {};\n\t\t\tconst categoryField = series.get(\"categoryField\", \"category\");\n\t\t\tconst valueField = series.get(\"valueField\", \"value\");\n\t\t\tgroupSliceData[categoryField] = this.get(\"groupName\", \"\");\n\t\t\tgroupSliceData[valueField] = groupValue;\n\t\t\tseries.data.setIndex(series.data.length - 1, groupSliceData);\n\n\t\t\tconst groupDataItem = this.getPrivate(\"groupDataItem\");\n\t\t\tif (groupValue == 0) {\n\t\t\t\tgroupDataItem!.hide(0);\n\t\t\t}\n\t\t\telse if (groupDataItem!.isHidden()) {\n\t\t\t\tgroupDataItem!.show();\n\t\t\t}\n\n\t\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\t\tif (clickBehavior != \"none\") {\n\t\t\t\tgroupDataItem!.get(\"slice\").set(\"toggleKey\", \"none\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleClick(): void {\n\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\tconst smallDataItems = this.getPrivate(\"smallDataItems\");\n\n\t\tif (clickBehavior == \"none\" || (smallDataItems && smallDataItems.length == 0)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst series = this.get(\"series\");\n\t\tconst groupDataItem = this.getPrivate(\"groupDataItem\");\n\n\t\t// Hide group slice\n\t\tgroupDataItem!.hide();\n\n\t\t// Reveal small slices\n\t\t$array.each(series!.dataItems, (item) => {\n\t\t\tif (smallDataItems!.indexOf(item) !== -1) {\n\t\t\t\titem.show();\n\t\t\t}\n\t\t\telse if (clickBehavior == \"zoom\") {\n\t\t\t\titem.hide();\n\t\t\t}\n\t\t});\n\n\t\tthis.zoomOutButton!.show();\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"series\")) {\n\t\t\tconst series = this.get(\"series\");\n\t\t\tif (series) {\n\t\t\t\tseries.events.on(\"datavalidated\", (_ev) => {\n\t\t\t\t\tthis.handleData();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t}\n\n}","import * as m from \"./../../../dist/es2015/plugins/sliceGrouper.js\";\nexport const am5plugins_sliceGrouper = m;"],"names":["_afterNew","this","_setRawDefault","initZoomButton","_root","addDisposer","get","container","root","tooltipContainer","zoomOutButton","children","push","Button","themeTags","icon","Graphics","hide","events","on","zoomOut","series","getPrivate","legend","categoryField","valueField","groupSliceData","data","dataItems","length","handleClick","setPrivate","visible","item","index","legendDataItem","show","updateGroupDataItem","groupDataItem","normalDataItems","_index","smallDataItems","groupValue","setIndex","isHidden","set","clickBehavior","indexOf","_beforeChanged","isDirty","_ev","handleData","Entity","SliceGrouper","className","am5plugins_sliceGrouper"],"sourceRoot":""}